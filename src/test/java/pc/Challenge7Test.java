package pc;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import pc.Challenge7.Pieces;

public class Challenge7Test {
    Challenge7 c;

    @Before
    public void setUp() throws Exception {
        c = new Challenge7();
    }

    @Test
    public void testForCheckPawn() {
        char[][] board = new char[][] { { '.', '.', 'k' }, { '.', '.', '.' }, { '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.PAWN, true, 0, 2));
        board = new char[][] { { 'k', '.', '.' }, { '.', 'P', '.' }, { '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.PAWN, true, 0, 0));
        board = new char[][] { { '.', '.', 'k' }, { 'p', 'P', 'p' }, { '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.PAWN, true, 0, 2));
        board = new char[][] { { '.', '.', 'p' }, { '.', 'K', '.' }, { '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.PAWN, false, 1, 1));
        board = new char[][] { { '.', '.', 'p' }, { '.', 'K', '.' }, { '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.PAWN, false, 1, 1));
        board = new char[][] { { 'p', '.', '.' }, { '.', 'K', '.' }, { '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.PAWN, false, 1, 1));
        board = new char[][] { { '.', '.', '.' }, { '.', 'K', 'p' }, { '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.PAWN, false, 1, 2));
        board = new char[][] { { '.', '.', 'k' }, { 'p', 'p', 'P' }, { '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.PAWN, true, 0, 2));
        board = new char[][] { { '.', '.', 'k' }, { 'P', 'p', 'p' }, { '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.PAWN, true, 0, 2));
        board = new char[][] { { '.', '.', 'k' }, { '.', '.', '.' }, { '.', '.', 'P' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.PAWN, true, 0, 2));
    }

    @Test
    public void testForCheckKnight() {
        char[][] board = new char[][] { { '.', '.', 'N', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.KNIGHT, true, 1, 2));
        board = new char[][] { { '.', 'N', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.KNIGHT, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { 'N', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.KNIGHT, true, 1, 2));
        board = new char[][] { { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', 'N', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.KNIGHT, true, 0, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'N' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.KNIGHT, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', 'k', '.', '.' }, { '.', '.', '.', 'N' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.KNIGHT, true, 1, 1));
        board = new char[][] { { '.', '.', 'n', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.KNIGHT, false, 1, 2));
        board = new char[][] { { '.', 'n', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.KNIGHT, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { 'n', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.KNIGHT, false, 0, 2));
        board = new char[][] { { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', 'n', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.KNIGHT, false, 0, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'n' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.KNIGHT, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', 'n', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.KNIGHT, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', '.', 'K' }, { '.', 'n', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.KNIGHT, false, 1, 3));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', 'K', '.', '.' }, { '.', '.', '.', 'n' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.KNIGHT, false, 1, 1));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'N' }, { '.', 'k', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.KNIGHT, false, 3, 1));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { 'n', '.', '.', 'N' }, { '.', '.', 'K', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.KNIGHT, false, 3, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', '.', 'n' }, { '.', '.', '.', '.' }, { '.', '.', 'K', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.KNIGHT, false, 3, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', 'n', '.', 'N' }, { '.', '.', '.', '.' }, { '.', '.', 'K', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.KNIGHT, false, 3, 2));
    }

    @Test
    public void testForCheckRook() {
        char[][] board = new char[][] { { '.', '.', 'R', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, true, 1, 2));
        board = new char[][] { { '.', 'R', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { 'R', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, true, 1, 2));
        board = new char[][] { { '.', '.', 'k', '.' }, { '.', '.', 'p', '.' }, { '.', '.', '.', '.' }, { '.', '.', 'R', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 0, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'R' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', 'R' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, true, 1, 2));

        board = new char[][] { { '.', '.', 'r', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, false, 1, 2));
        board = new char[][] { { '.', 'r', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { 'r', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, false, 1, 2));
        board = new char[][] { { '.', '.', 'K', '.' }, { '.', '.', 'P', '.' }, { '.', '.', '.', '.' }, { '.', '.', 'r', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 0, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'r' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', 'r' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, false, 1, 2));
        board = new char[][] { { '.', '.', '.', 'k' }, { '.', '.', 'n', '.' }, { '.', '.', '.', 'R' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, true, 0, 3));
        board = new char[][] { { '.', '.', '.', 'R' }, { '.', '.', '.', 'n' }, { '.', '.', '.', 'k' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 2, 3));
        board = new char[][] { { '.', 'R', 'n', 'k' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 0, 3));
        board = new char[][] { { '.', 'k', 'n', 'R' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 0, 1));
        board = new char[][] { { '.', 'r', 'N', 'K' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 0, 3));
        board = new char[][] { { '.', 'K', 'N', 'r' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 0, 1));
        board = new char[][] { { '.', 'K', '.', '.' }, { '.', 'r', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, false, 0, 1));
        board = new char[][] { { '.', 'r', '.', '.' }, { '.', 'N', '.', '.' }, { '.', 'K', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 2, 1));
    }

    @Test
    public void testForCheckBishop() {
        char[][] board = new char[][] { { '.', 'B', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', 'B' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', 'B' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', 'B', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { 'B', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', 'p' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', 'n' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', 'b', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', 'k' }, { '.', '.', 'p', '.' }, { '.', '.', '.', '.' }, { 'B', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 0, 3));
        board = new char[][] { { '.', '.', 'k', '.' }, { '.', '.', '.', 'p' }, { '.', '.', '.', '.' }, { 'B', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'B' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));

        board = new char[][] { { '.', 'b', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', 'b' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', 'b' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', 'b', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { 'b', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', 'P' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', 'N' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', 'B', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', 'K' }, { '.', '.', 'P', '.' }, { '.', '.', '.', '.' }, { 'b', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 0, 3));
        board = new char[][] { { '.', '.', 'K', '.' }, { '.', '.', '.', 'P' }, { 'b', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, false, 0, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'b' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
    }

    @Test
    public void testForCheckQueen() {
        char[][] board = new char[][] { { '.', '.', 'R', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, true, 1, 2));
        board = new char[][] { { '.', 'R', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { 'R', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, true, 1, 2));
        board = new char[][] { { '.', '.', 'k', '.' }, { '.', '.', 'p', '.' }, { '.', '.', '.', '.' }, { '.', '.', 'R', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 0, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'R' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', 'R' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, true, 1, 2));

        board = new char[][] { { '.', '.', 'r', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, false, 1, 2));
        board = new char[][] { { '.', 'r', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { 'r', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, false, 1, 2));
        board = new char[][] { { '.', '.', 'K', '.' }, { '.', '.', 'P', '.' }, { '.', '.', '.', '.' }, { '.', '.', 'r', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 0, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'r' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', 'r' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, false, 1, 2));
        board = new char[][] { { '.', '.', '.', 'k' }, { '.', '.', 'n', '.' }, { '.', '.', '.', 'R' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, true, 0, 3));
        board = new char[][] { { '.', '.', '.', 'R' }, { '.', '.', '.', 'n' }, { '.', '.', '.', 'k' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 2, 3));
        board = new char[][] { { '.', 'R', 'n', 'k' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 0, 3));
        board = new char[][] { { '.', 'k', 'n', 'R' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, true, 0, 1));
        board = new char[][] { { '.', 'r', 'N', 'K' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 0, 3));
        board = new char[][] { { '.', 'K', 'N', 'r' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 0, 1));
        board = new char[][] { { '.', 'K', '.', '.' }, { '.', 'r', '.', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.ROOK, false, 0, 1));
        board = new char[][] { { '.', 'r', '.', '.' }, { '.', 'N', '.', '.' }, { '.', 'K', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.ROOK, false, 2, 1));

        char[][] board = new char[][] { { '.', 'B', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', 'B' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', 'B' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', 'B', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { 'B', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', 'p' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', 'n' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', 'b', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', 'k' }, { '.', '.', 'p', '.' }, { '.', '.', '.', '.' }, { 'B', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 0, 3));
        board = new char[][] { { '.', '.', 'k', '.' }, { '.', '.', '.', 'p' }, { '.', '.', '.', '.' }, { 'B', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'k', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'B' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, true, 1, 2));

        board = new char[][] { { '.', 'b', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', 'b' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', 'b' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', 'b', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { 'b', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', 'P' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', 'N' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', 'B', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
        board = new char[][] { { '.', '.', '.', 'K' }, { '.', '.', 'P', '.' }, { '.', '.', '.', '.' }, { 'b', '.', '.', '.' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 0, 3));
        board = new char[][] { { '.', '.', 'K', '.' }, { '.', '.', '.', 'P' }, { 'b', '.', '.', '.' }, { '.', '.', '.', '.' } };
        c.initBoard(board);
        assertTrue(c.heuristicSearch(Pieces.BISHOP, false, 0, 2));
        board = new char[][] { { '.', '.', '.', '.' }, { '.', '.', 'K', '.' }, { '.', '.', '.', '.' }, { '.', '.', '.', 'b' } };
        c.initBoard(board);
        assertFalse(c.heuristicSearch(Pieces.BISHOP, false, 1, 2));
    }
}
